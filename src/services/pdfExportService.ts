import { GeneratedReport, ReportSection } from './reportGenerationService';

export class PDFExportService {
  
  // Generate HTML content for PDF conversion
  static generateHTMLForPDF(report: GeneratedReport): string {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${report.title}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #fff;
        }
        
        .header {
            text-align: center;
            border-bottom: 3px solid #3B82F6;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }
        
        .title {
            font-size: 2.5em;
            font-weight: bold;
            color: #1F2937;
            margin-bottom: 10px;
        }
        
        .meta {
            color: #6B7280;
            font-size: 0.9em;
        }
        
        .section {
            margin-bottom: 30px;
            page-break-inside: avoid;
        }
        
        .section-title {
            font-size: 1.5em;
            font-weight: bold;
            color: #1F2937;
            border-bottom: 2px solid #E5E7EB;
            padding-bottom: 5px;
            margin-bottom: 15px;
        }
        
        .summary {
            background: #F3F4F6;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #3B82F6;
            margin-bottom: 30px;
        }
        
        .insight-high {
            background: #FEF2F2;
            border-left: 4px solid #EF4444;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .insight-medium {
            background: #FFFBEB;
            border-left: 4px solid #F59E0B;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .insight-low {
            background: #F0FDF4;
            border-left: 4px solid #10B981;
            padding: 15px;
            margin: 10px 0;
            border-radius: 4px;
        }
        
        .chart-placeholder {
            background: #F9FAFB;
            border: 2px dashed #D1D5DB;
            border-radius: 8px;
            padding: 40px;
            text-align: center;
            color: #6B7280;
            margin: 20px 0;
        }
        
        .prediction-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .prediction-card {
            background: #F8FAFC;
            border: 1px solid #E2E8F0;
            border-radius: 8px;
            padding: 15px;
        }
        
        .prediction-metric {
            font-weight: bold;
            color: #1F2937;
            margin-bottom: 10px;
        }
        
        .prediction-value {
            font-size: 0.9em;
            color: #4B5563;
        }
        
        .positive { color: #10B981; }
        .negative { color: #EF4444; }
        
        ul {
            padding-left: 20px;
        }
        
        li {
            margin-bottom: 5px;
        }
        
        .footer {
            border-top: 1px solid #E5E7EB;
            padding-top: 20px;
            margin-top: 40px;
            text-align: center;
            color: #6B7280;
            font-size: 0.8em;
        }
        
        @media print {
            body { margin: 0; }
            .section { page-break-inside: avoid; }
            .chart-placeholder { display: none; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="title">${report.title}</div>
        <div class="meta">
            Generated on ${report.createdAt.toLocaleDateString()} â€¢ 
            ${report.metadata.recordCount.toLocaleString()} records analyzed â€¢ 
            Generated in ${report.metadata.generationTime}ms
        </div>
    </div>

    <div class="summary">
        <h2>Executive Summary</h2>
        <p>${report.summary}</p>
    </div>

    ${this.generateSectionsHTML(report.sections)}

    ${this.generatePredictionsHTML(report.predictiveAnalysis)}

    <div class="footer">
        <p>Report generated by FlexBI AI-Powered Analytics Platform</p>
        <p>Data source: ${report.metadata.dataSource} | Columns analyzed: ${report.metadata.columnsAnalyzed.join(', ')}</p>
    </div>
</body>
</html>`;
    
    return html;
  }
  
  // Generate sections HTML
  private static generateSectionsHTML(sections: ReportSection[]): string {
    return sections.map(section => {
      let sectionHTML = `<div class="section">
        <h2 class="section-title">${section.title}</h2>`;
      
      if (section.type === 'chart') {
        sectionHTML += `
          <p>${section.content}</p>
          <div class="chart-placeholder">
            ðŸ“Š Chart: ${section.chartConfig?.type?.toUpperCase() || 'Chart'}<br>
            ${section.chartConfig?.xAxis} vs ${section.chartConfig?.yAxis}<br>
            <small>Chart visualization would appear here in a full implementation</small>
          </div>`;
      } else if (section.type === 'insight') {
        const lines = section.content.split('\n');
        sectionHTML += '<div>';
        
        lines.forEach(line => {
          if (line.includes('ðŸ”´ Critical Insights:')) {
            sectionHTML += '<h3 style="color: #EF4444;">ðŸ”´ Critical Insights</h3>';
          } else if (line.includes('ðŸŸ¡ Important Findings:')) {
            sectionHTML += '<h3 style="color: #F59E0B;">ðŸŸ¡ Important Findings</h3>';
          } else if (line.includes('ðŸŸ¢ Additional Observations:')) {
            sectionHTML += '<h3 style="color: #10B981;">ðŸŸ¢ Additional Observations</h3>';
          } else if (line.startsWith('â€¢')) {
            const severity = line.includes('critical') || line.includes('high') ? 'high' : 
                           line.includes('important') || line.includes('medium') ? 'medium' : 'low';
            sectionHTML += `<div class="insight-${severity}">${line.slice(1).trim()}</div>`;
          } else if (line.trim() && !line.includes('**')) {
            sectionHTML += `<p>${line}</p>`;
          }
        });
        
        sectionHTML += '</div>';
      } else {
        // Regular text content
        const lines = section.content.split('\n');
        sectionHTML += '<div>';
        
        lines.forEach(line => {
          if (line.startsWith('**') && line.endsWith('**')) {
            sectionHTML += `<h3>${line.slice(2, -2)}</h3>`;
          } else if (line.startsWith('â€¢')) {
            sectionHTML += `<li>${line.slice(1).trim()}</li>`;
          } else if (line.trim()) {
            sectionHTML += `<p>${line}</p>`;
          }
        });
        
        sectionHTML += '</div>';
      }
      
      sectionHTML += '</div>';
      return sectionHTML;
    }).join('');
  }
  
  // Generate predictions HTML
  private static generatePredictionsHTML(predictions: any[]): string {
    if (predictions.length === 0) return '';
    
    let html = `<div class="section">
      <h2 class="section-title">Predictive Analysis Dashboard</h2>
      <div class="prediction-grid">`;
    
    predictions.forEach(pred => {
      const change = ((pred.predictedValue - pred.currentValue) / pred.currentValue * 100);
      const isPositive = change > 0;
      
      html += `
        <div class="prediction-card">
          <div class="prediction-metric">${pred.metric}</div>
          <div class="prediction-value">
            <strong>Current:</strong> ${pred.currentValue.toFixed(2)}<br>
            <strong>Predicted:</strong> 
            <span class="${isPositive ? 'positive' : 'negative'}">
              ${pred.predictedValue.toFixed(2)} (${isPositive ? '+' : ''}${change.toFixed(1)}%)
            </span><br>
            <strong>Confidence:</strong> ${(pred.confidence * 100).toFixed(0)}%<br>
            <strong>Method:</strong> ${pred.methodology}
          </div>
        </div>`;
    });
    
    html += '</div></div>';
    return html;
  }
  
  // Export as HTML file (can be converted to PDF using browser print or external tools)
  static exportAsHTML(report: GeneratedReport): void {
    const htmlContent = this.generateHTMLForPDF(report);
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${report.title.replace(/\s+/g, '_')}_Report.html`;
    a.click();
    URL.revokeObjectURL(url);
  }
  
  // Generate print-friendly version
  static openPrintPreview(report: GeneratedReport): void {
    const htmlContent = this.generateHTMLForPDF(report);
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      printWindow.focus();
      
      // Trigger print dialog after content loads
      printWindow.onload = () => {
        setTimeout(() => printWindow.print(), 500);
      };
    }
  }
}
